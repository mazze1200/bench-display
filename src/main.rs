use anyhow::{bail, Result};
use bench_display::wifi;
use core::str;
use embedded_svc::{
    http::{client::Client, Method},
    io::Read,
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{prelude::Peripherals, reset},
    http::client::{Configuration, EspHttpConnection},
};
use log::{error, info};

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    info!("Hello, world!");

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            error!(
                "Could not connect to Wi-Fi network: {:?} | {:?}",
                app_config.wifi_ssid, err
            );
            std::thread::sleep(std::time::Duration::from_secs(5));
            reset::restart();
        }
    };

    loop {
        std::thread::sleep(std::time::Duration::from_secs(1));
        info!("Hello, world!");
    }
}
